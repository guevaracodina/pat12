function fc_GLM_on_ROI1 = pat_fc_GLM_on_ROI_cfg
% Graphical interface configuration function for pat_fc_GLM_on_ROI_run
% GLM regression of global brain signal in resting-state from ROI/seeds time
% trace in order to remove global source of variance. 
%_______________________________________________________________________________
% Copyright (C) 2012 LIOM Laboratoire d'Imagerie Optique et Moléculaire
%                    École Polytechnique de Montréal
%_______________________________________________________________________________

% Choose PAT matrix
PATmat                      = pat_PATmat_cfg(1);
% Force re-do
redo1                       = pat_redo_cfg(false);
% PAT copy/overwrite method
PATmatCopyChoice            = pat_PATmatCopyChoice_cfg('GLMfcPAT');
% Choose ROI selection method (all/selected)
ROI_choice                  = pat_roi_choice_cfg;
% Colors to include (HbT, SO2, Bmode)
IC                          = pat_include_colors_cfg(true, true);

% Include global brain signal/seeds as a regressor
regressor_choice            = pat_fc_GLM_regressor_choice;

% Regress signal from whole image time-course
wholeImage                  = cfg_menu;
wholeImage.tag              = 'wholeImage';
wholeImage.name             = 'Regress signal from whole image time-course';
wholeImage.labels           = {'Yes','No'};
wholeImage.values           = {true, false};
wholeImage.val              = {true};
wholeImage.help             = {'Regress signal from whole image time-course. If not selected, GLM will be performed only on ROIs'};

% Clean-up redundant SPM files if regression is succesful
cleanupGLM                  = cfg_menu;
cleanupGLM.tag              = 'cleanupGLM';
cleanupGLM.name             = 'Clean-up SPM files';
cleanupGLM.labels           = {'Yes','No'};
cleanupGLM.values           = {true, false};
cleanupGLM.val              = {true};
cleanupGLM.help             = {'Clean-up files generated by SPM GLM regression. Keeps only the NIfTI files of the regressed signals'};

% Generate / save figures
[generate_figures ...
    save_figures]           = pat_generate_figures_cfg;

% Figure resolution
figRes                      = cfg_entry;
figRes.tag                  = 'figRes';
figRes.name                 = 'Figure resolution';
figRes.strtype              = 'r';
figRes.num                  = [1 1];
figRes.val{1}               = 300;
figRes.help                 = {'Enter figure resolution in dpi [300-1200]'};

% Executable Branch
fc_GLM_on_ROI1              = cfg_exbranch;       % This is the branch that has information about how to run this module
fc_GLM_on_ROI1.name         = 'GLM regression';             % The display name
fc_GLM_on_ROI1.tag          = 'fc_GLM_on_ROI1'; %Very important: tag is used when calling for execution
fc_GLM_on_ROI1.val          = {PATmat redo1 PATmatCopyChoice ROI_choice...
    IC regressor_choice wholeImage cleanupGLM generate_figures save_figures...
    figRes};    % The items that belong to this branch. All items must be filled before this branch can run or produce virtual outputs
fc_GLM_on_ROI1.prog         = @pat_fc_GLM_on_ROI_run;  % A function handle that will be called with the harvested job to run the computation
fc_GLM_on_ROI1.vout         = @pat_cfg_vout_fc_GLM_on_ROI; % A function handle that will be called with the harvested job to determine virtual outputs
fc_GLM_on_ROI1.help         = {'GLM regression of global brain signal from ROI/seeds and whole image time trace in order to remove global source of variance'};

return

% Make PAT.mat available as a dependency
function vout = pat_cfg_vout_fc_GLM_on_ROI(job)
vout                        = cfg_dep;                  % The dependency object
vout.sname                  = 'PAT.mat';                % Displayed dependency name
vout.src_output             = substruct('.','PATmat');  %{1}); %,'PATmat');
vout.tgt_spec               = cfg_findspec({{'filter','mat','strtype','e'}});

% EOF

