function varargout = GUI_TEMPORAL(varargin)
% GUI_TEMPORAL M-file for GUI_TEMPORAL.fig
%      GUI_TEMPORAL, by itself, creates a new GUI_TEMPORAL or raises the existing
%      singleton*.
%
%      H = GUI_TEMPORAL returns the handle to a new GUI_TEMPORAL or the handle to
%      the existing singleton*.
%
%      GUI_TEMPORAL('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in GUI_TEMPORAL.M with the given input arguments.
%
%      GUI_TEMPORAL('Property','Value',...) creates a new GUI_TEMPORAL or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before GUI_TEMPORAL_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to GUI_TEMPORAL_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help GUI_TEMPORAL

% Last Modified by GUIDE v2.5 13-Jul-2012 16:54:54

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @GUI_TEMPORAL_OpeningFcn, ...
                   'gui_OutputFcn',  @GUI_TEMPORAL_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before GUI_TEMPORAL is made visible.
function GUI_TEMPORAL_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to GUI_TEMPORAL (see VARARGIN)

% Choose default command line output for GUI_TEMPORAL
handles.output = hObject;

set(hObject,'toolbar','figure');

% Build a colormap that consists of 2 separate
% colormaps.
cmap1 = gray(128);
cmap2 = hot(128);
cmap = [cmap1;cmap2];
colormap(cmap)
handles.acq.cmap = cmap;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes GUI_TEMPORAL wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = GUI_TEMPORAL_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on button press in load_iq.
function load_iq_Callback(hObject, eventdata, handles)
% hObject    handle to load_iq (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% [open_FileName,open_PathName] = uigetfile('*.iq.bmode','Ouvrir un fichier de données');

if isfield(handles, 'acq')
    if isfield(handles.acq, 'open_PathName');
        [open_FileName,open_PathName] = uigetfile('*.iq.bmode','Ouvrir un fichier de données',handles.acq.open_PathName);
    elseif isfield(handles.acq, 'working_directory')
        [open_FileName,open_PathName] = uigetfile('*.iq.bmode','Ouvrir un fichier de données',handles.acq.working_directory);   
    else
        [open_FileName,open_PathName] = uigetfile('*.iq.bmode','Ouvrir un fichier de données');
    end
else
   [open_FileName,open_PathName] = uigetfile('*.iq.bmode','Ouvrir un fichier de données');
end


if (open_FileName)
    
    data_path = strcat([open_PathName open_FileName]);
    handles.acq.data_path = data_path;
    handles.acq.open_FileName = open_FileName;
    handles.acq.open_PathName = open_PathName;
    
    str_temp = strfind(data_path, '.bmode');
    
    if (str_temp)
        short_data_path = data_path(1:str_temp-1);
        shortest_data_path = data_path(1:str_temp-4);
        handles.acq.short_data_path = short_data_path;
        handles.acq.shortest_data_path = shortest_data_path;
        
        xml_data_path = [data_path(1:str_temp) 'xml'];

        param = VsiParseXmlModif(xml_data_path,'.bmode');
        handles.acq.param = param;
        
        % Type of data
        handles.acq.source_type = 'IQ';
        
        % Set offsets in interface
        handles.acq.YOffset = str2num(get(handles.edit_yoffset,'string'));
        handles.acq.VOffset = str2num(get(handles.edit_voffset,'string'));      
        set(handles.edit_yoffset,'enable', 'on');
        set(handles.edit_voffset,'enable', 'on');    
        
        % Calculate number of frames in file
        handles.acq.n_frames = VsiFindNFrames(short_data_path, '.bmode');
        
        % Get the Time Stamp Data for all frames
        handles.acq.TimeStampData = VsiBModeIQTimeFrame(short_data_path, '.bmode', handles.acq.n_frames);       
%         figure;plot( handles.acq.TimeStampData/1000);
        
        set(handles.display_status,'string', 'Loading IQ data...');
        handles.acq.frame_number = 1;
        set(handles.frame_number,'string',num2str(1));
        set(handles.frame_number,'enable','on');
        set(handles.total_frames,'string',num2str(handles.acq.n_frames));
        set(handles.previous_button,'enable','off');
        set(handles.next_button,'enable','on');
        set(handles.display_filename_iq, 'string', open_FileName);
        set(handles.display_filename_preprocessed, 'string', '');        
        set(handles.pushbutton_preprocess, 'enable','on');
        
        handles = lock_interface(handles);
        pause(0.5);

        % Display US (for frame 1)
        handles = VsiBModeReconstructRFModif(handles, short_data_path, 1);
        
        % Display PA (for frame 1)
        if (get(handles.checkbox_pa_display,'value'))
            VsiBeamformPaModif(handles, short_data_path, 1, 1);
        end
        
        handles = unlock_interface(handles);
        set(handles.display_status,'string', 'OK');
    end
end

guidata(hObject, handles);

function handles = lock_interface(handles)

handles.acq.enable_edit_yoffset = get(handles.edit_yoffset,'enable');
handles.acq.enable_edit_voffset = get(handles.edit_voffset,'enable'); 
handles.acq.enable_frame_number = get(handles.frame_number,'enable');
handles.acq.enable_previous_button = get(handles.previous_button,'enable'); 
handles.acq.enable_next_button = get(handles.next_button,'enable');       
handles.acq.enable_pushbutton_preprocess = get(handles.pushbutton_preprocess, 'enable');
handles.acq.enable_load_iq = get(handles.load_iq,'enable');
handles.acq.enable_load_preprocessed = get(handles.load_preprocessed,'enable');

set(handles.edit_yoffset,'enable', 'off');
set(handles.edit_voffset,'enable', 'off');  
set(handles.frame_number,'enable','off');
set(handles.previous_button,'enable','off'); 
set(handles.next_button,'enable','off');   
set(handles.pushbutton_preprocess, 'enable','off');
set(handles.load_iq,'enable','off');
set(handles.load_preprocessed,'enable','off');


function handles = unlock_interface(handles)

set(handles.edit_yoffset,'enable', handles.acq.enable_edit_yoffset);
set(handles.edit_voffset,'enable',  handles.acq.enable_edit_voffset);  
set(handles.frame_number,'enable', handles.acq.enable_frame_number);
set(handles.previous_button,'enable', handles.acq.enable_previous_button);   
set(handles.next_button,'enable', handles.acq.enable_next_button);       
set(handles.pushbutton_preprocess, 'enable', handles.acq.enable_pushbutton_preprocess);
set(handles.load_iq,'enable',handles.acq.enable_load_iq);
set(handles.load_preprocessed,'enable',handles.acq.enable_load_preprocessed);


function display_filename_iq_Callback(hObject, eventdata, handles)
% hObject    handle to display_filename_iq (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of display_filename_iq as text
%        str2double(get(hObject,'String')) returns contents of display_filename_iq as a double


% --- Executes during object creation, after setting all properties.
function display_filename_iq_CreateFcn(hObject, eventdata, handles)
% hObject    handle to display_filename_iq (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in next_button.
function next_button_Callback(hObject, eventdata, handles)
% hObject    handle to next_button (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

frame_number = handles.acq.frame_number;
frame_number = frame_number + 1;

set(handles.frame_number, 'string', num2str(frame_number));
handles.acq.frame_number = frame_number;
  
if frame_number >= handles.acq.n_frames
   set(handles.next_button, 'enable','off'); 
   set(handles.next_copy_button, 'enable','off'); 
else
   set(handles.previous_button, 'enable','on');
end

handles = lock_interface(handles);
pause(0.5);

if (strcmp(handles.acq.source_type, 'IQ'))
    % Display US
    handles = VsiBModeReconstructRFModif(handles, handles.acq.short_data_path, frame_number);

    % Display PA
    if (get(handles.checkbox_pa_display,'value'))
        VsiBeamformPaModif(handles, handles.acq.short_data_path, frame_number, frame_number);
    end
else
    abs_data = handles.acq.Bmode_data(:,:,frame_number);
    BfData = handles.acq.PAmode_data(:,:,frame_number);
    
    % Display US
    DisplayUSdata(handles, abs_data, handles.acq.param);
    
    % Display PA
    DisplayPAdata(handles, BfData, handles.acq.param);
end
      
handles = unlock_interface(handles);
guidata(hObject, handles);



function frame_number_Callback(hObject, eventdata, handles)
% hObject    handle to frame_number (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of frame_number as text
%        str2double(get(hObject,'String')) returns contents of frame_number as a double

frame_number = str2num(get(handles.frame_number, 'string'));
handles.acq.frame_number = frame_number;

if frame_number == handles.acq.n_frames
    set(handles.next_button,'enable','off');
    set(handles.next_copy_button,'enable','off');
    set(handles.previous_button,'enable','on');
end

if frame_number == 1
    set(handles.previous_button,'enable','off');
    set(handles.next_button,'enable','on');
end

handles = lock_interface(handles);
pause(0.5);

if (strcmp(handles.acq.source_type, 'IQ'))
    % Display US
    handles = VsiBModeReconstructRFModif(handles, handles.acq.short_data_path, frame_number);

    % Display PA
    if (get(handles.checkbox_pa_display,'value'))
        VsiBeamformPaModif(handles, handles.acq.short_data_path, frame_number, frame_number);
    end
else
    abs_data = handles.acq.Bmode_data(:,:,frame_number);
    BfData = handles.acq.PAmode_data(:,:,frame_number);
    
    % Display US
    DisplayUSdata(handles, abs_data, handles.acq.param);
    
    % Display PA
    DisplayPAdata(handles, BfData, handles.acq.param);
end

handles = unlock_interface(handles);
guidata(hObject, handles);


% --- Executes during object creation, after setting all properties.
function frame_number_CreateFcn(hObject, eventdata, handles)
% hObject    handle to frame_number (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function total_frames_Callback(hObject, eventdata, handles)
% hObject    handle to total_frames (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of total_frames as text
%        str2double(get(hObject,'String')) returns contents of total_frames as a double


% --- Executes during object creation, after setting all properties.
function total_frames_CreateFcn(hObject, eventdata, handles)
% hObject    handle to total_frames (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in previous_button.
function previous_button_Callback(hObject, eventdata, handles)
% hObject    handle to previous_button (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


frame_number = handles.acq.frame_number;
frame_number = frame_number - 1;

set(handles.frame_number, 'string', num2str(frame_number));
handles.acq.frame_number = frame_number;

if frame_number <= 1
   set(handles.previous_button, 'enable','off');
else
   set(handles.next_button, 'enable','on');
end

handles = lock_interface(handles);
pause(0.5);

if (strcmp(handles.acq.source_type, 'IQ'))
    % Display US
    handles = VsiBModeReconstructRFModif(handles, handles.acq.short_data_path, frame_number);

    % Display PA
    if (get(handles.checkbox_pa_display,'value'))
        VsiBeamformPaModif(handles, handles.acq.short_data_path, frame_number, frame_number);
    end
else
    abs_data = handles.acq.Bmode_data(:,:,frame_number);
    BfData = handles.acq.PAmode_data(:,:,frame_number);
    
    % Display US
    DisplayUSdata(handles, abs_data, handles.acq.param);
    
    % Display PA
    DisplayPAdata(handles, BfData, handles.acq.param);
end

handles = unlock_interface(handles);
guidata(hObject, handles);


% --- Executes on button press in checkbox_pa_display.
function checkbox_pa_display_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_pa_display (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_pa_display



function edit_voffset_Callback(hObject, eventdata, handles)
% hObject    handle to edit_voffset (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_voffset as text
%        str2double(get(hObject,'String')) returns contents of edit_voffset as a double

VOffset = str2num(get(handles.edit_voffset,'string'));
handles.acq.VOffset = VOffset;

% Display US
frame_number = handles.acq.frame_number;
handles = VsiBModeReconstructRFModif(handles, handles.acq.short_data_path, frame_number);

% Display PA
if (get(handles.checkbox_pa_display,'value'))
    VsiBeamformPaModif(handles, handles.acq.short_data_path, frame_number, frame_number);
end

guidata(hObject, handles);



% --- Executes during object creation, after setting all properties.
function edit_voffset_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_voffset (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_yoffset_Callback(hObject, eventdata, handles)
% hObject    handle to edit_yoffset (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_yoffset as text
%        str2double(get(hObject,'String')) returns contents of edit_yoffset as a double
YOffset = str2num(get(handles.edit_yoffset,'string'));
handles.acq.YOffset = YOffset;

% Display US
frame_number = handles.acq.frame_number;
handles = VsiBModeReconstructRFModif(handles, handles.acq.short_data_path, frame_number);

% Display PA
if (get(handles.checkbox_pa_display,'value'))
    VsiBeamformPaModif(handles, short_data_path, frame_number, frame_number);
end

guidata(hObject, handles);


% --- Executes during object creation, after setting all properties.
function edit_yoffset_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_yoffset (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in load_preprocessed.
function load_preprocessed_Callback(hObject, eventdata, handles)
% hObject    handle to load_preprocessed (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

if isfield(handles, 'acq')
    if isfield(handles.acq, 'open_PathName');
        [open_FileName,open_PathName] = uigetfile('*.mat','Ouvrir un fichier de données',handles.acq.open_PathName);
    elseif isfield(handles.acq, 'working_directory')
        [open_FileName,open_PathName] = uigetfile('*.mat','Ouvrir un fichier de données',handles.acq.working_directory);   
    else
        [open_FileName,open_PathName] = uigetfile('*.mat','Ouvrir un fichier de données');
    end
else
   [open_FileName,open_PathName] = uigetfile('*.mat','Ouvrir un fichier de données');
end


if (open_FileName)
    
    data_path = strcat([open_PathName open_FileName]);
    handles.acq.data_path = data_path;
    handles.acq.open_FileName = open_FileName;
    handles.acq.open_PathName = open_PathName;
    
    % Load interface parameters
    handles.acq.YOffset = str2num(get(handles.edit_yoffset,'string'));
    handles.acq.VOffset = str2num(get(handles.edit_voffset,'string'));

    % Create ROI
    handles.acq.hrois = cell(1,1);
    
    % Type of data
    handles.acq.source_type = 'MAT';
        
    % Load data
    load(data_path);
    handles.acq.Bmode_data = Bmode_data;
    handles.acq.PAmode_data = PAmode_data;
    handles.acq.param = param;
    handles.acq.n_frames = processing_param.n_frames;
    
    abs_data = Bmode_data(:,:,1);
    BfData = PAmode_data(:,:,1);
            
    handles.acq.frame_number = 1;
    set(handles.frame_number,'string',num2str(1));
    set(handles.frame_number,'enable','on');
    set(handles.total_frames,'string',num2str(handles.acq.n_frames));
    set(handles.previous_button,'enable','off');
    set(handles.next_button,'enable','on');
    set(handles.display_filename_preprocessed, 'string', open_FileName);
    set(handles.display_filename_iq, 'string', '');
    set(handles.pushbutton_preprocess, 'enable','off');
    set(handles.pushbutton_define_roi, 'enable','on');
    
    handles = lock_interface(handles);
    pause(0.5);
    
    % Display US
    DisplayUSdata(handles, abs_data, param);
    
    % Display PA
    DisplayPAdata(handles, BfData, param);
      
    % Set offsets in interface
    set(handles.edit_yoffset,'enable', 'on');
    set(handles.edit_voffset,'enable', 'on');
        
    handles = unlock_interface(handles);
end

guidata(hObject, handles);

function display_filename_preprocessed_Callback(hObject, eventdata, handles)
% hObject    handle to display_filename_preprocessed (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of display_filename_preprocessed as text
%        str2double(get(hObject,'String')) returns contents of display_filename_preprocessed as a double


% --- Executes during object creation, after setting all properties.
function display_filename_preprocessed_CreateFcn(hObject, eventdata, handles)
% hObject    handle to display_filename_preprocessed (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in pushbutton_preprocess.
function pushbutton_preprocess_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_preprocess (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

set(handles.display_status,'string', 'Preprocessing data...');
handles = lock_interface(handles);
pause(0.5);

[handles] = PreprocessData(handles, handles.acq.short_data_path, handles.acq.n_frames);

set(handles.display_status,'string', 'Data preprocessed OK');
handles = unlock_interface(handles);


function display_status_Callback(hObject, eventdata, handles)
% hObject    handle to display_status (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of display_status as text
%        str2double(get(hObject,'String')) returns contents of display_status as a double


% --- Executes during object creation, after setting all properties.
function display_status_CreateFcn(hObject, eventdata, handles)
% hObject    handle to display_status (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in pushbutton_define_roi.
function pushbutton_define_roi_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_define_roi (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

h = impoly;

if (~isempty(handles.acq.hrois{1}))
    temp_h = handles.acq.hrois{1};
    
    if (isvalid(temp_h))
       delete(temp_h);
    end
end

handles.acq.hrois{1} = h;
setColor(h,'yellow');
set(handles.pushbutton_extract_temporal,'enable','on');
guidata(hObject, handles);


% --- Executes on button press in pushbutton_extract_temporal.
function pushbutton_extract_temporal_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_extract_temporal (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% Stocke les positions des ROIs du frame actuel

index = 1;

% Si le handle de la ROI existe
if (~isempty(handles.acq.hrois{index}))
    temp_h = handles.acq.hrois{index};
    
    % Si la ROI existe
    if (isvalid(temp_h))
        
        % Copie la position
        pos = getPosition(temp_h);
        
        % Le stocke
        handles.acq.roi_positions{frame_number,index} = pos;
    else
        handles.acq.roi_positions{frame_number,index} = [];
    end
    
    % Detruit le handle de toute facon
    handles.acq.hrois{index} = [];
    
else
    handles.acq.roi_positions{frame_number,index} = [];
end


